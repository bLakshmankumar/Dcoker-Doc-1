DockerFile Commands-:
---------------------
FROM                          - FROM is used to define the base image to start the build process. Every Dockerfile must start with the FROM instruction.

ENV                           - This command used to set the environment variables that is required to run the project.(ENV sets the environment variables, which can be used in the Dockerfile and any scripts that it calls. These are persistent with the container too and they can be referenced at any time).
                                 

WORKDIR                       - WORKDIR tells Docker that the rest of the commands will be run in the context of the /app folder inside the image.

ENTRYPOINT                    - ENTRYPOINT has two forms:
                                  ENTRYPOINT ["executable", "param1", "param2"] (exec form, preferred)
                                  ENTRYPOINT command param1 param2 (shell form)
                                  An ENTRYPOINT allows you to configure a container that will run as an executable.
                                  

CMD                           - The main purpose of a CMD is to provide defaults when executing a container. These will be executed after the entry point. In Dockerfiles, you can define CMD defaults that include an executable.
                              - NOTE: There can only be one CMD instruction in a Dockerfile. If you want to list more than one CMD, then only the last CMD will take effect. "CMD will be overridden when running the container with alternative arguments".


COPY                          - The COPY command is used to copy one or many local files or folders from source and adds them to the filesystem of the containers at the destination path.

ADD                           - The ADD command is used to add one or many local files or folders from the source and adds them to the filesystem of the containers at the destination path.

RUN                           - The RUN instruction will execute any commands in a new layer on top of the current image and commit the results. The resulting committed image will be used for the next step in the Dockerfile. The RUN command runs within the container at build time.

EXPOSE                        - The EXPOSE command informs the Docker that the container listens on the specified network ports at runtime. You can specify whether the port listens on TCP or UDP, and the default is TCP if the protocol is not specified.
-----------------------------------------------------------------------------------------------------------------------------------------------------------

Docker log commands :
=====================

docker container logs --help                                     - To list the helping commands

docker logs "container id"                                       - To check the specific container logs

docker logs --since 2019-10-20T10:00:00 <container_id>           -  View Docker logs since a specific date
 
docker logs --tail 100 4921d714d338                              - in order to show 100 lines from your container for Docker logs

docker inspect --format={{.Logpath}} "container id"              - for check the specific path information

docker inspect <container_id_or_name>                            - Inspecting a Container

docker inspect <image_id_or_name>                                - Inspecting an image

grep error "resource name/id"                                    - we can get the error information about a specific resource 

docker ps --filter="status=exited"                               - we can see only exited container information.

docker ps --filter="status=stopped"                              - we can get the stopped state container information.

docker logs --since 10  "containername/ID"                       - we can get the all the logs/errors happened in last 10 min

docker container logs --tail 2 "containername/ID"                - we can get the last 2 logs of a container

docker container logs -t "containername/ID"                       - we can get the container information with TimeStamp

docker info                                                       - Executing the “info” command displays several pieces of information about the OS.

docker events                                                     - we can get the container information 


..........................................................................................................................................................................

docker commands -:
---------------------------

docker --version                                         - To get the docker version

docker pull "image name"                                 - To download a docker image.

docker build -t imagename:tag                            -  To bulid an docker image

docker tag myimage:latest myimage:v1.0                   -  Assume you have an image with the ID or name myimage:latest and you want to add the tag myimage:v1.0

docker run --name "containername"                        - To create a container
 
docker ps                                                - To get the docker running container information

docker ps -a                                             - To get the all docker container information (both running & Stopped state)

docker images                                            - To get list of  docker images

docker inspect "containername/ID"                        - To  get the detailed information about container

df -h                                                    - to know the mount volume list

docker start "containername/ID"                          - To start the container

docker stop "containername/ID"                           - To stop the container

docker rm "containername/ID"                             - To containerremove the 

docker rmi "imagename/id"                                - To remove the docker image

docker volume ls                                         - To know the list volumes.

docker prune                                             - To remove all unused docker resources

docker stats                                             - To know the docker resourse information ( RAM, Memory, CPU, Swap & etc)

docker search imagename(ex-: postgrees)                  - it'll search and it'll list the availble images on that name

docker pull imagename:version                            - it'll download the image to our local machine

Docker Exec Multiple Commands-:
-------------------------------
docker exec <container> bash -c "command1 ; command2 ; command3"   >  docker exec 74f86665f0fd bash -c "cd /var/log ; cat dmesg "
----------------------------------------------------------------------------------------------------------------------------------------------------------

Set Environment Variables-:
----------------------------
In order to set environment variables, execute “docker exec” with the “-e” option and specify the environment variable name and value next to it.

$ docker exec -e var='value' <container> <command>          >  docker exec -e UID='myuser' 74f86665f0fd printenv UID

-------------------------------------------------------------------------------------------------------------------------------------------------

Requirment-1 :
============
  Create a new network named wp-mysql-network using the bridge driver. Allocate subnet 182.18.0.0/24. Configure Gateway 182.18.0.1
Solution :
==========
  docker network create --driver bridge --subnet 182.18.0.0/24 --gateway 182.18.0.1 wp-mysql-network.
  inspect the created network by docker network inspect wp-mysql-network

Requirment-2 :
============
  Deploy a mysql database using the mysql:5.6 image and name it mysql-dh. Attach it to the newly created network wp-mysql-network
  Set the database password to use db_pass123. The environment variable to set is MYSQL ROOT PASSWORD.
Solution :
==========
   docker run -d -e MYSQL ROOT PASSWORD=db_pass123 --name mysql-db --network wp-mysql-network mysql:5.6

Requirment-3 :
==============
  Deploy a web application named webapp using the kodekloud/simple- webapp-mysql image. Expose the port to 38080 on the host.
  The application makes use of two environment variable:
    1: DB Host with the value mysql-db.
    2: DB Password with the value db_pass123.
  Make sure to attach it to the newly created network called mysit network.
  Also make sure to link the Hysen and the slepp container.
Solution :
===========
 Run the command: docker run --networ=wp-mysql-network -e DB_Host=mysql-db  -e DB_Password=db_pass123 -p 38080:8080 --nаmе webapp --link mysql-db:mysql-db -d kodekloud/simple-webapp-mysql

